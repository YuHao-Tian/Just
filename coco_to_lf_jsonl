import os, json, argparse, random
from pycocotools.coco import COCO

INSTR = (
  "You are an object detection assistant. Return ONLY a valid JSON object with key 'detections'. "
  "Each item: {\"label\": <one of COCO-80>, \"box\": [x1,y1,x2,y2], \"confidence\": [0,1]}. "
  "Coordinates are normalized to [0,1] with (x1,y1)=top-left and (x2,y2)=bottom-right. "
  "If nothing is found, return {\"detections\":[]}. Output JSON only."
)

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--ann", default="/home/vipuser/coco/annotations/instances_train2017.json")
    ap.add_argument("--imgroot", default="/home/vipuser/coco/images")  # 根目录
    ap.add_argument("--split", default="train2017")                     # 子目录名
    ap.add_argument("--out", default="/home/vipuser/lf_data/train2017_detjson.jsonl")
    ap.add_argument("--max_dets", type=int, default=15)
    args = ap.parse_args()

    os.makedirs(os.path.dirname(args.out), exist_ok=True)
    coco = COCO(args.ann)
    cats = coco.loadCats(coco.getCatIds())
    id2name = {c["id"]: c["name"] for c in cats}

    n = 0
    with open(args.out, "w") as f:
        for img in coco.dataset["images"]:
            img_id = img["id"]
            fn, W, H = img["file_name"], img["width"], img["height"]
            anns = coco.loadAnns(coco.getAnnIds(imgIds=[img_id], iscrowd=None))

            dets = []
            for a in anns:
                if "bbox" not in a or a["bbox"] is None: continue
                x,y,w,h = a["bbox"]
                if w <= 1 or h <= 1: continue
                x1,y1,x2,y2 = x/W, y/H, (x+w)/W, (y+h)/H
                x1 = min(max(x1,0.0),1.0); y1 = min(max(y1,0.0),1.0)
                x2 = min(max(x2,0.0),1.0); y2 = min(max(y2,0.0),1.0)
                if x2 <= x1 or y2 <= y1: continue
                name = id2name.get(a["category_id"], None)
                if not name: continue
                dets.append({"label": name, "box": [x1,y1,x2,y2], "confidence": 1.0})
            if len(dets) > args.max_dets:
                dets = random.sample(dets, args.max_dets)

            # LLaMA-Factory 多模态：images 是个列表；路径相对 image_folder 根
            rel_img = f"{args.split}/{fn}"
            sample = {
                "id": f"coco_{args.split}_{img_id}",
                "images": [rel_img],
                "conversations": [
                    {"from": "user", "value": "<image>\n" + INSTR},
                    {"from": "assistant", "value": json.dumps({"detections": dets}, ensure_ascii=False)}
                ]
            }
            f.write(json.dumps(sample, ensure_ascii=False) + "\n")
            n += 1
    print(f"[done] wrote {n} samples -> {args.out}")

if __name__ == "__main__":
    main()
